// It appears that all given unit testing has to do with handling clock events.
// Interrupts may not be entering the picture yet. We'll see...

// import the CPU class

// Set up a type of array, ITestEvent, with two numbers: expected cycles vs actual cycles

// ✅ TEST 1: confirm that SP gets set, always, to last byte of internal SRAM

    // ex. register space = 0x100, sram = 0x1000 
    // (pass SRAM to constructor like const cpu = new CPU(new Uint16Array(1024), 0x1000);)

    // then get the SP -> should be at 0x10FF

// ✅ TEST 2: confirm that queued events execute after the given number of cycles has passed

    // set up a test cpu const cpu = new CPU(new Uint16Array(1024), 0x1000);
    // set up an array of ITestEvents (const events: ITestEvent[] = [];)

    // addClockEvent where callback is defined as pushing i, cpu cycle pairs onto the events array, 
    // pass in i as cycles param
    // for (const i of [1, 4, 10]) { 
    //    cpu.addClockEvent(() => events.push([i, cpu.cycles]), i);
    //  }

    // loop 10 times:
        // increment cpu cycles
        // call tick

    // event array should look like [1, 1],[4, 4],[10, 10]
    
// ✅ TEST 3: confirm that CPU correctly sorts events when added in reverse order

    // set up a test cpu const cpu = new CPU(new Uint16Array(1024), 0x1000);
    // set up an array of ITestEvents (const events: ITestEvent[] = [];)

    // same test as before, but the for loop iterates in reverse order: for (const i of [1, 4, 10])

// ✅ TEST 4: confirm that CPU updates the number of cycles for the given clock event

    // set up a test cpu const cpu = new CPU(new Uint16Array(1024), 0x1000);
    // set up an array of ITestEvents (const events: ITestEvent[] = [];)

    // set up an empty array of AVRClockEventCallback called callbacks

    // addClockEvent where callback is defined as pushing i, cpu cycle pairs onto the events array, 
    // pass in i as cycles param
    // store result in callbacks[i]
        for (const i of [1, 4, 10]) {
          callbacks[i] = cpu.addClockEvent(() => events.push([i, cpu.cycles]), i);
        }

    // update the callbacks at a few locations with updated cycle counts
    // cpu.updateClockEvent(callbacks[4], 2); - new cycle number = 2
    // cpu.updateClockEvent(callbacks[1], 12);

     // loop 13 times:
        // increment cpu cycles
        // call tick

    // check the events array, should = [4, 2], [10, 10], [1, 12],

// ✅ TEST 5: confirm that CPU removes the given clock event

    // set up a test cpu const cpu = new CPU(new Uint16Array(1024), 0x1000);
    // set up an array of ITestEvents (const events: ITestEvent[] = [];)

    // set up an empty array of AVRClockEventCallback called callbacks

    // addClockEvent where callback is defined as pushing i, cpu cycle pairs onto the events array, 
    // pass in i as cycles param
    // store result in callbacks[i]
        for (const i of [1, 4, 10]) {
          callbacks[i] = cpu.addClockEvent(() => events.push([i, cpu.cycles]), i);
        }

    // call clearClockEvent and pass it callback[4]

     // loop 10 times:
        // increment cpu cycles
        // call tick

    //  check the events array, should = [1, 1], [10, 10]

// ✅ TEST 6: confirm that CPU returns false if the provided clock event is not scheduled - NOTE: PASSES ASSUMING THAT CALLBACK FUNCTIONS ARE NOT IDENTICAL. CALLBACK FUNCTIONS ACT AS UNIQUE IDENTIFIER
    
    // set up a test cpu const cpu = new CPU(new Uint16Array(1024), 0x1000);

    // add a couple of clock events, each taking 4 and 10 cycles, respectively. Store them in consts
    // const event4 = cpu.addClockEvent(() => 0, 4);
    // const event10 = cpu.addClockEvent(() => 0, 10);

    // add one more clock event, for good measure
    // cpu.addClockEvent(() => 0, 1);

    // clear event4 and event10 twice. First time should = true for successful removal, 
    // second time should = false because they were already removed... 




